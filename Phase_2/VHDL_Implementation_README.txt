This project implements Phase 2 of ECE 4120/5120 (Spring 2025), integrating a Register unit, MUX, Sign-Extension, ALU, and components from Phase 1. Below is a description of each VHDL file and IP component included in the zipped implementation:

- **ALU.vhd**: Implements the Arithmetic Logic Unit (ALU), a combinational block with two 32-bit operands, a 4-bit control signal, a 32-bit result output, and a 1-bit zero flag. It performs six operations: AND, OR, ADD, SUB, XOR, and NOR, as specified in the project constraints.

- **ALU_Mux.vhd**: Implements a 2-to-1 multiplexer for the ALU, selecting between two 32-bit inputs (e.g., a register value or sign-extended immediate) based on a 1-bit select signal, producing a 32-bit output.

- **SignExtend.vhd**: Performs sign-extension, converting a 16-bit signed input to a 32-bit output by replicating the 16th bit (sign bit) 16 times, compliant with the project’s ALU-Mux input requirements.

- **register_file.vhd**: Implements a 32-register file (each 32 bits wide) with 5-bit read/write register inputs, a 32-bit write data port, and two 32-bit read data outputs, as per MIPS compliance specified in the project.

- **reg_read_unit.vhd**: Handles the read operations of the register file, selecting two 32-bit register values based on 5-bit read register inputs, as depicted in Figure 2 of the project description.

- **reg_write_unit.vhd**: Manages the write operations of the register file, using a clock, write enable (RegWrite), 5-bit register number, and 32-bit register data inputs, as shown in Figure 3 of the project description.

- **decoder.vhd**: Implements a 5-to-32 decoder for register selection in the write unit, generating enable signals for one of the 32 registers based on the 5-bit register number.

- **register_N.vhd**: Defines a 32-bit register component with clock, enable, and data inputs, used as a building block within the register file.

- **type_def.vhd**: Contains custom type definitions (e.g., std_logic_vector arrays) used across multiple components in the project for consistency.

- **Phase_2.vhd**: The top-level module integrating the Register unit, MUX, Sign-Extension, ALU, and Phase 1 components (e.g., instruction memory IP), forming the complete design.

- **de10_lite_top.vhd**: The top-level module for the DE10-Lite board, interfacing the Phase 2 design with the board’s inputs (switches, buttons) and outputs (seven-segment displays, LEDs).

- **phase_2_tb.vhd**: Test bench for simulating the Phase_2.vhd module, loading register values and executing the required MIPS instructions (add, sub, and, xor, nor, addi) as per the test bench requirements.

- **de10_lite_top_tb.vhd**: Test bench for simulating the de10_lite_top.vhd module, verifying functionality on the DE10-Lite board configuration.

- **memory_1.vhd**: An IP component generated by Quartus, likely representing the instruction memory from Phase 1, integrated into the Phase 2 design.

- **pc_adder.vhd**: Implements a program counter adder, incrementing the PC by 4 (for MIPS instruction addressing), carried over from Phase 1.

- **PC.vhd**: Implements the program counter register, storing the current instruction address, also from Phase 1.

Additional Quartus-generated files (e.g., memory_1_inst.vhd, memory_1.qip, memory_1.cmp, Phase_2.qpf, Phase_2.qsf) and directories (db, incremental_db) are included in the zip to ensure the project can be compiled and run in Quartus.